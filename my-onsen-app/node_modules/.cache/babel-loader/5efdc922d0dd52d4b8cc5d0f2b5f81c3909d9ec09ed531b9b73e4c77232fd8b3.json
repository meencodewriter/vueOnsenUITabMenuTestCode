{"ast":null,"code":"/*\nCopyright 2013-2015 ASIAL CORPORATION\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n*/\n\nimport onsElements from '../ons/elements.js';\nimport util from '../ons/util.js';\nimport autoStyle from '../ons/autostyle.js';\nimport ModifierUtil from '../ons/internal/modifier-util.js';\nimport BaseElement from './base/base-element.js';\nimport contentReady from '../ons/content-ready.js';\nconst defaultClassName = 'card';\nconst scheme = {\n  '': 'card--*',\n  '.card__title': 'card--*__title',\n  '.card__content': 'card--*__content'\n};\n\n/**\n * @element ons-card\n * @category visual\n * @modifier material\n *   [en]A card with material design.[/en]\n *   [ja]リストの上下のボーダーが無いリストを表示します。[/ja]\n * @description\n *   [en]\n *    Component to create a card that displays some information.\n *\n *    The card may be composed by divs with specially prepared classes `title` and/or `content`. You can also add your own content as you please.[/en]\n *   [ja][/ja]\n * @tutorial vanilla/Reference/card\n * @example\n * <ons-card>\n *   <p>Some content</p>\n * </ons-card>\n */\nexport default class CardElement extends BaseElement {\n  /**\n   * @attribute modifier\n   * @type {String}\n   * @description\n   *   [en]The appearance of the card.[/en]\n   *   [ja]リストの表現を指定します。[/ja]\n   */\n\n  constructor() {\n    super();\n    contentReady(this, () => {\n      this._compile();\n    });\n  }\n  _compile() {\n    let title, content;\n    for (let i = 0; i < this.children.length; i++) {\n      const el = this.children[i];\n      if (el.classList.contains('title')) {\n        el.classList.add('card__title');\n        title = el;\n      } else if (el.classList.contains('content')) {\n        el.classList.add('card__content');\n        content = el;\n      }\n    }\n    autoStyle.prepare(this);\n    this.classList.add(defaultClassName);\n    ModifierUtil.initModifier(this, scheme);\n  }\n  static get observedAttributes() {\n    return ['modifier', 'class'];\n  }\n  attributeChangedCallback(name, last, current) {\n    switch (name) {\n      case 'class':\n        util.restoreClass(this, defaultClassName, scheme);\n        break;\n      case 'modifier':\n        ModifierUtil.onModifierChanged(last, current, this, scheme);\n        break;\n    }\n  }\n}\nonsElements.Card = CardElement;\ncustomElements.define('ons-card', CardElement);","map":{"version":3,"names":["onsElements","util","autoStyle","ModifierUtil","BaseElement","contentReady","defaultClassName","scheme","CardElement","constructor","_compile","title","content","i","children","length","el","classList","contains","add","prepare","initModifier","observedAttributes","attributeChangedCallback","name","last","current","restoreClass","onModifierChanged","Card","customElements","define"],"sources":["/Users/meenho/Documents/A_techlmh/vueTests/my-onsen-app/node_modules/onsenui/esm/elements/ons-card.js"],"sourcesContent":["/*\nCopyright 2013-2015 ASIAL CORPORATION\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n*/\n\nimport onsElements from '../ons/elements.js';\nimport util from '../ons/util.js';\nimport autoStyle from '../ons/autostyle.js';\nimport ModifierUtil from '../ons/internal/modifier-util.js';\nimport BaseElement from './base/base-element.js';\nimport contentReady from '../ons/content-ready.js';\n\nconst defaultClassName = 'card';\nconst scheme = {\n  '': 'card--*',\n  '.card__title': 'card--*__title',\n  '.card__content': 'card--*__content'\n};\n\n/**\n * @element ons-card\n * @category visual\n * @modifier material\n *   [en]A card with material design.[/en]\n *   [ja]リストの上下のボーダーが無いリストを表示します。[/ja]\n * @description\n *   [en]\n *    Component to create a card that displays some information.\n *\n *    The card may be composed by divs with specially prepared classes `title` and/or `content`. You can also add your own content as you please.[/en]\n *   [ja][/ja]\n * @tutorial vanilla/Reference/card\n * @example\n * <ons-card>\n *   <p>Some content</p>\n * </ons-card>\n */\nexport default class CardElement extends BaseElement {\n\n  /**\n   * @attribute modifier\n   * @type {String}\n   * @description\n   *   [en]The appearance of the card.[/en]\n   *   [ja]リストの表現を指定します。[/ja]\n   */\n\n  constructor() {\n    super();\n\n    contentReady(this, () => {\n      this._compile();\n    });\n  }\n\n  _compile() {\n    let title, content;\n\n    for (let i = 0; i < this.children.length; i++) {\n      const el = this.children[i];\n\n      if (el.classList.contains('title')) {\n        el.classList.add('card__title');\n        title = el;\n      }\n      else if (el.classList.contains('content')) {\n        el.classList.add('card__content');\n        content = el;\n      }\n    }\n\n    autoStyle.prepare(this);\n    this.classList.add(defaultClassName);\n    ModifierUtil.initModifier(this, scheme);\n  }\n\n  static get observedAttributes() {\n    return ['modifier', 'class'];\n  }\n\n  attributeChangedCallback(name, last, current) {\n    switch (name) {\n      case 'class':\n        util.restoreClass(this, defaultClassName, scheme);\n        break;\n      case 'modifier':\n        ModifierUtil.onModifierChanged(last, current, this, scheme);\n        break;\n    }\n  }\n}\n\nonsElements.Card = CardElement;\ncustomElements.define('ons-card', CardElement);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,WAAW,MAAM,oBAAoB;AAC5C,OAAOC,IAAI,MAAM,gBAAgB;AACjC,OAAOC,SAAS,MAAM,qBAAqB;AAC3C,OAAOC,YAAY,MAAM,kCAAkC;AAC3D,OAAOC,WAAW,MAAM,wBAAwB;AAChD,OAAOC,YAAY,MAAM,yBAAyB;AAElD,MAAMC,gBAAgB,GAAG,MAAM;AAC/B,MAAMC,MAAM,GAAG;EACb,EAAE,EAAE,SAAS;EACb,cAAc,EAAE,gBAAgB;EAChC,gBAAgB,EAAE;AACpB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,WAAW,SAASJ,WAAW,CAAC;EAEnD;AACF;AACA;AACA;AACA;AACA;AACA;;EAEEK,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IAEPJ,YAAY,CAAC,IAAI,EAAE,MAAM;MACvB,IAAI,CAACK,QAAQ,CAAC,CAAC;IACjB,CAAC,CAAC;EACJ;EAEAA,QAAQA,CAAA,EAAG;IACT,IAAIC,KAAK,EAAEC,OAAO;IAElB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACC,QAAQ,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAE;MAC7C,MAAMG,EAAE,GAAG,IAAI,CAACF,QAAQ,CAACD,CAAC,CAAC;MAE3B,IAAIG,EAAE,CAACC,SAAS,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;QAClCF,EAAE,CAACC,SAAS,CAACE,GAAG,CAAC,aAAa,CAAC;QAC/BR,KAAK,GAAGK,EAAE;MACZ,CAAC,MACI,IAAIA,EAAE,CAACC,SAAS,CAACC,QAAQ,CAAC,SAAS,CAAC,EAAE;QACzCF,EAAE,CAACC,SAAS,CAACE,GAAG,CAAC,eAAe,CAAC;QACjCP,OAAO,GAAGI,EAAE;MACd;IACF;IAEAd,SAAS,CAACkB,OAAO,CAAC,IAAI,CAAC;IACvB,IAAI,CAACH,SAAS,CAACE,GAAG,CAACb,gBAAgB,CAAC;IACpCH,YAAY,CAACkB,YAAY,CAAC,IAAI,EAAEd,MAAM,CAAC;EACzC;EAEA,WAAWe,kBAAkBA,CAAA,EAAG;IAC9B,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC;EAC9B;EAEAC,wBAAwBA,CAACC,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAE;IAC5C,QAAQF,IAAI;MACV,KAAK,OAAO;QACVvB,IAAI,CAAC0B,YAAY,CAAC,IAAI,EAAErB,gBAAgB,EAAEC,MAAM,CAAC;QACjD;MACF,KAAK,UAAU;QACbJ,YAAY,CAACyB,iBAAiB,CAACH,IAAI,EAAEC,OAAO,EAAE,IAAI,EAAEnB,MAAM,CAAC;QAC3D;IACJ;EACF;AACF;AAEAP,WAAW,CAAC6B,IAAI,GAAGrB,WAAW;AAC9BsB,cAAc,CAACC,MAAM,CAAC,UAAU,EAAEvB,WAAW,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}