{"ast":null,"code":"/*\nCopyright 2013-2015 ASIAL CORPORATION\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n*/\n\n/* eslint-disable no-use-before-define */\n\n'use strict';\n\nimport \"core-js/modules/es.array.push.js\";\nconst startsWith = (s, c) => s.substr(0, c.length) === c;\nconst endsWith = (s, c) => s.substr(s.length - c.length, c.length) === c;\nconst unwrap = s => s.slice(1, -1);\nconst isObjectString = s => startsWith(s, '{') && endsWith(s, '}');\nconst isArrayString = s => startsWith(s, '[') && endsWith(s, ']');\nconst isQuotedString = s => startsWith(s, '\\'') && endsWith(s, '\\'') || startsWith(s, '\"') && endsWith(s, '\"');\nconst error = (token, string, originalString) => {\n  throw new Error('Unexpected token \\'' + token + '\\' at position ' + (originalString.length - string.length - 1) + ' in string: \\'' + originalString + '\\'');\n};\nconst processToken = (token, string, originalString) => {\n  if (token === 'true' || token === 'false') {\n    return token === 'true';\n  } else if (isQuotedString(token)) {\n    return unwrap(token);\n  } else if (!isNaN(token)) {\n    return +token;\n  } else if (isObjectString(token)) {\n    return parseObject(unwrap(token));\n  } else if (isArrayString(token)) {\n    return parseArray(unwrap(token));\n  } else {\n    error(token, string, originalString);\n  }\n};\nconst nextToken = string => {\n  string = string.trim();\n  let limit = string.length;\n  if (string[0] === ':' || string[0] === ',') {\n    limit = 1;\n  } else if (string[0] === '{' || string[0] === '[') {\n    const c = string.charCodeAt(0);\n    let nestedObject = 1;\n    for (let i = 1; i < string.length; i++) {\n      if (string.charCodeAt(i) === c) {\n        nestedObject++;\n      } else if (string.charCodeAt(i) === c + 2) {\n        nestedObject--;\n        if (nestedObject === 0) {\n          limit = i + 1;\n          break;\n        }\n      }\n    }\n  } else if (string[0] === '\\'' || string[0] === '\"') {\n    for (let i = 1; i < string.length; i++) {\n      if (string[i] === string[0]) {\n        limit = i + 1;\n        break;\n      }\n    }\n  } else {\n    for (let i = 1; i < string.length; i++) {\n      if ([' ', ',', ':'].indexOf(string[i]) !== -1) {\n        limit = i;\n        break;\n      }\n    }\n  }\n  return string.slice(0, limit);\n};\nconst parseObject = string => {\n  const isValidKey = key => /^[A-Z_$][A-Z0-9_$]*$/i.test(key);\n  string = string.trim();\n  const originalString = string;\n  const object = {};\n  let readingKey = true,\n    key,\n    previousToken,\n    token;\n  while (string.length > 0) {\n    previousToken = token;\n    token = nextToken(string);\n    string = string.slice(token.length, string.length).trim();\n    if (token === ':' && (!readingKey || !previousToken || previousToken === ',') || token === ',' && readingKey || token !== ':' && token !== ',' && previousToken && previousToken !== ',' && previousToken !== ':') {\n      error(token, string, originalString);\n    } else if (token === ':' && readingKey && previousToken) {\n      previousToken = isQuotedString(previousToken) ? unwrap(previousToken) : previousToken;\n      if (isValidKey(previousToken)) {\n        key = previousToken;\n        readingKey = false;\n      } else {\n        throw new Error('Invalid key token \\'' + previousToken + '\\' at position 0 in string: \\'' + originalString + '\\'');\n      }\n    } else if (token === ',' && !readingKey && previousToken) {\n      object[key] = processToken(previousToken, string, originalString);\n      readingKey = true;\n    }\n  }\n  if (token) {\n    object[key] = processToken(token, string, originalString);\n  }\n  return object;\n};\nconst parseArray = string => {\n  string = string.trim();\n  const originalString = string;\n  const array = [];\n  let previousToken, token;\n  while (string.length > 0) {\n    previousToken = token;\n    token = nextToken(string);\n    string = string.slice(token.length, string.length).trim();\n    if (token === ',' && (!previousToken || previousToken === ',')) {\n      error(token, string, originalString);\n    } else if (token === ',') {\n      array.push(processToken(previousToken, string, originalString));\n    }\n  }\n  if (token) {\n    if (token !== ',') {\n      array.push(processToken(token, string, originalString));\n    } else {\n      error(token, string, originalString);\n    }\n  }\n  return array;\n};\nconst parse = string => {\n  string = string.trim();\n  if (isObjectString(string)) {\n    return parseObject(unwrap(string));\n  } else if (isArrayString(string)) {\n    return parseArray(unwrap(string));\n  } else {\n    throw new Error('Provided string must be object or array like: ' + string);\n  }\n};\nexport default parse;","map":{"version":3,"names":["startsWith","s","c","substr","length","endsWith","unwrap","slice","isObjectString","isArrayString","isQuotedString","error","token","string","originalString","Error","processToken","isNaN","parseObject","parseArray","nextToken","trim","limit","charCodeAt","nestedObject","i","indexOf","isValidKey","key","test","object","readingKey","previousToken","array","push","parse"],"sources":["/Users/meenho/Documents/A_techlmh/vueTests/my-onsen-app/node_modules/onsenui/esm/ons/animation-options-parser.js"],"sourcesContent":["/*\nCopyright 2013-2015 ASIAL CORPORATION\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n*/\n\n/* eslint-disable no-use-before-define */\n\n'use strict';\n\nconst startsWith = (s, c) => s.substr(0, c.length) === c;\nconst endsWith = (s, c) => s.substr(s.length - c.length, c.length) === c;\nconst unwrap = s => s.slice(1, -1);\nconst isObjectString = s => startsWith(s, '{') && endsWith(s, '}');\nconst isArrayString = s => startsWith(s, '[') && endsWith(s, ']');\nconst isQuotedString = s => (startsWith(s, '\\'') && endsWith(s, '\\'')) || (startsWith(s, '\"') && endsWith(s, '\"'));\n\nconst error = (token, string, originalString) => {\n  throw new Error('Unexpected token \\'' + token + '\\' at position ' + (originalString.length - string.length - 1) + ' in string: \\'' + originalString + '\\'');\n};\n\nconst processToken = (token, string, originalString) => {\n  if (token === 'true' || token === 'false') {\n    return token === 'true';\n  } else if (isQuotedString(token)) {\n    return unwrap(token);\n  } else if (!isNaN(token)) {\n    return +(token);\n  } else if (isObjectString(token)) {\n    return parseObject(unwrap(token));\n  } else if (isArrayString(token)) {\n    return parseArray(unwrap(token));\n  } else {\n    error(token, string, originalString);\n  }\n};\n\nconst nextToken = (string) => {\n  string = string.trim();\n  let limit = string.length;\n\n  if (string[0] === ':' || string[0] === ',') {\n\n    limit = 1;\n\n  } else if (string[0] === '{' || string[0] === '[') {\n\n    const c = string.charCodeAt(0);\n    let nestedObject = 1;\n    for (let i = 1; i < string.length; i++) {\n      if (string.charCodeAt(i) === c) {\n        nestedObject++;\n      } else if (string.charCodeAt(i) === c + 2) {\n        nestedObject--;\n        if (nestedObject === 0) {\n          limit = i + 1;\n          break;\n        }\n      }\n    }\n\n  } else if (string[0] === '\\'' || string[0] === '\"') {\n\n    for (let i = 1; i < string.length; i++) {\n      if (string[i] === string[0]) {\n        limit = i + 1;\n        break;\n      }\n    }\n\n  } else {\n\n    for (let i = 1; i < string.length; i++) {\n      if ([' ', ',', ':'].indexOf(string[i]) !== -1) {\n        limit = i;\n        break;\n      }\n    }\n\n  }\n\n  return string.slice(0, limit);\n};\n\nconst parseObject = (string) => {\n  const isValidKey = key => /^[A-Z_$][A-Z0-9_$]*$/i.test(key);\n\n  string = string.trim();\n  const originalString = string;\n  const object = {};\n  let readingKey = true, key, previousToken, token;\n\n  while (string.length > 0) {\n    previousToken = token;\n    token = nextToken(string);\n    string = string.slice(token.length, string.length).trim();\n\n    if ((token === ':' && (!readingKey || !previousToken || previousToken === ','))\n       || (token === ',' && readingKey)\n       || (token !== ':' && token !== ',' && (previousToken && previousToken !== ',' && previousToken !== ':'))) {\n      error(token, string, originalString);\n    } else if (token === ':' && readingKey && previousToken) {\n      previousToken = isQuotedString(previousToken) ? unwrap(previousToken) : previousToken;\n      if (isValidKey(previousToken)) {\n        key = previousToken;\n        readingKey = false;\n      } else {\n        throw new Error('Invalid key token \\'' + previousToken + '\\' at position 0 in string: \\'' + originalString + '\\'');\n      }\n    } else if (token === ',' && !readingKey && previousToken) {\n      object[key] = processToken(previousToken, string, originalString);\n      readingKey = true;\n    }\n  }\n\n  if (token) {\n    object[key] = processToken(token, string, originalString);\n  }\n\n  return object;\n};\n\nconst parseArray = (string) => {\n  string = string.trim();\n  const originalString = string;\n  const array = [];\n  let previousToken, token;\n\n  while (string.length > 0) {\n    previousToken = token;\n    token = nextToken(string);\n    string = string.slice(token.length, string.length).trim();\n\n    if (token === ',' && (!previousToken || previousToken === ',')) {\n      error(token, string, originalString);\n    } else if (token === ',') {\n      array.push(processToken(previousToken, string, originalString));\n    }\n  }\n\n  if (token) {\n    if (token !== ',') {\n      array.push(processToken(token, string, originalString));\n    } else {\n      error(token, string, originalString);\n    }\n  }\n\n  return array;\n};\n\nconst parse = (string) => {\n  string = string.trim();\n\n  if (isObjectString(string)) {\n    return parseObject(unwrap(string));\n  } else if (isArrayString(string)) {\n    return parseArray(unwrap(string));\n  } else {\n    throw new Error('Provided string must be object or array like: ' + string);\n  }\n};\n\nexport default parse;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}